{"version":3,"sources":["img/1.jpg","img/2.jpg","img/3.jpg","img/4.jpg","img/5.jpg","img/6.jpg","img/7.jpg","img/8.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","type","placeholder","name","id","href","src","require","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,kFCwD5BC,MArDf,WACE,OACE,yBAAKC,UAAU,OAGf,gCACI,0CACA,2BAAOC,KAAK,SAASC,YAAY,QAAQC,KAAK,QAAQC,GAAG,WAI7D,yBAAKJ,UAAU,eACb,4BACE,4BAAI,uBAAGK,KAAK,KAAR,cACJ,4BAAI,uBAAGA,KAAK,KAAR,YACJ,4BAAI,uBAAGA,KAAK,KAAR,qBACJ,4BAAI,uBAAGA,KAAK,KAAR,cACJ,4BAAI,uBAAGA,KAAK,KAAR,YAKR,8BACI,6BAAK,yBAAKC,IAAKC,EAAQ,MAAiB,uBAAGF,KAAK,iBAAR,YACxC,6BAAK,yBAAKC,IAAKC,EAAQ,MAAiB,uBAAGF,KAAK,iBAAR,YACxC,6BAAK,yBAAKC,IAAKC,EAAQ,MACnB,uCAEJ,6BAAK,yBAAKD,IAAKC,EAAQ,MACnB,uCAEJ,6BAAK,yBAAKD,IAAKC,EAAQ,MACnB,uCAEJ,6BAAK,yBAAKD,IAAKC,EAAQ,MACnB,uCAEJ,6BAAK,yBAAKD,IAAKC,EAAQ,MACnB,uCAEJ,6BAAK,yBAAKD,IAAKC,EAAQ,MACnB,wCAKR,gCACI,2DCtCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37974518.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.d04d7459.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.1145d901.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.9559833d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/4.d832a352.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.a25324d5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.981ef871.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.c9f8341a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.9d0ffcf9.jpg\";","import React from 'react';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    {/* Header */}\n    <header>\n        <h1>FutureTube</h1>\n        <input type=\"search\" placeholder=\"Busca\" name=\"busca\" id=\"busca\"/>\n    </header>\n\n    {/* Menu Lateral */}\n    <div className=\"menuLateral\">\n      <ul>\n        <li><a href=\"#\">Ínicio</a></li>\n        <li><a href=\"#\">Em alta</a></li>\n        <li><a href=\"#\">Inscrições</a></li>\n        <li><a href=\"#\">Favoritos</a></li>\n        <li><a href=\"#\">Sobre</a></li>\n      </ul>\n    </div>\n\n    {/* Conteúdo Principal */}\n    <main>\n        <div><img src={require(\"./img/1.jpg\")}/><a href=\"./video1.html\">Media 1</a></div>\n        <div><img src={require(\"./img/2.jpg\")}/><a href=\"./video2.html\">Media 2</a></div>\n        <div><img src={require(\"./img/3.jpg\")}/>\n            <p>Media 3</p>\n        </div>\n        <div><img src={require(\"./img/4.jpg\")}/>\n            <p>Media 4</p>\n        </div>\n        <div><img src={require(\"./img/5.jpg\")}/>\n            <p>Media 5</p>\n        </div>\n        <div><img src={require(\"./img/6.jpg\")}/>\n            <p>Media 6</p>\n        </div>\n        <div><img src={require(\"./img/7.jpg\")}/>\n            <p>Media 7</p>\n        </div>\n        <div><img src={require(\"./img/8.jpg\")}/>\n            <p>Media 8</p>\n        </div>\n    </main>\n\n    {/* Footer */}\n    <footer>\n        <h3>2020 - Footer do Futuro!</h3>\n    </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}